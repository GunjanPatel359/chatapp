generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id             String          @id @default(cuid()) @map("_id")
  email          String          @unique
  username       String          @unique
  avatarUrl      String?
  serverProfiles ServerProfile[] // Servers the user has joined
  ownedServers   Server[] // Servers the user owns

  Dms String[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Server {
  id             String          @id @default(cuid()) @map("_id")
  name           String
  description    String
  imageUrl       String?
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id])

  roles          ServerRole[] // Global roles for the server
  categories     Category[]      @relation("serverCategory")
  serverProfiles ServerProfile[] // Profiles for users in this server

  defaultServerRoleId String?
  defaultServerRole   DefaultServerRole?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ServerProfile {
  id          String  @id @default(cuid()) @map("_id")
  name        String?
  description String?
  imageUrl    String?

  roles    UserRoleAssignment[] // Roles assigned to this user for the server
  // categoryRoles     UserCategoryRole[]   // User-specific roles for categories
  // channelRoles      UserChannelRole[]    // User-specific roles for channels
  userId   String
  user     User                 @relation(fields: [userId], references: [id])
  serverId String
  server   Server               @relation(fields: [serverId], references: [id])

  isDeleted Boolean @default(false)

  // Ensure one profile per user per server
  @@unique([userId, serverId])

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  messages ChannelMessage[] @ignore
}

model DefaultServerRole {
  id   String @id @default(cuid()) @map("_id")
  name String @default("everyone")

  serverId String? @unique
  server   Server? @relation(fields: [serverId], references: [id])

  // general permission
  viewChannel Boolean @default(true)

  //member permission
  createInvite Boolean @default(true)
  // changeNickname Boolean @default(true)
  // manageNickname Boolean @default(false)

  // text channel permission
  sendMessage       Boolean @default(true)
  attachFiles       Boolean @default(false)
  seemessageHistory Boolean @default(true)

  // voice channel permission
  connect Boolean @default(true)
  speak   Boolean @default(false)
  video   Boolean @default(false)
}

model DefaultCategoryRole {
  id   String @id @default(cuid()) @map("_id")
  name String @default("everyone")

  categoryId String   @unique
  category   Category @relation(fields: [categoryId], references: [id])

  // general permission
  viewChannel PermissionType @default(ALLOW)

  //member permission
  createInvite PermissionType @default(NEUTRAL)
  // changeNickname Boolean @default(true)
  // manageNickname Boolean @default(false)

  // text channel permission
  sendMessage       PermissionType @default(ALLOW)
  attachFiles       PermissionType @default(NEUTRAL)
  seemessageHistory PermissionType @default(ALLOW)

  // voice channel permission
  connect PermissionType @default(NEUTRAL)
  speak   PermissionType @default(NEUTRAL)
  video   PermissionType @default(NEUTRAL)
}

model DefaultChannelRole {
  id   String @id @default(cuid()) @map("_id")
  name String @default("everyone")

  channelId   String  @unique
  channel     Channel @relation(fields: [channelId], references: [id])
  // general permission
  viewChannel PermissionType @default(ALLOW)

  //member permission
  createInvite PermissionType @default(NEUTRAL)
  // changeNickname Boolean @default(true)
  // manageNickname Boolean @default(false)

  // text channel permission
  sendMessage       PermissionType @default(ALLOW)
  attachFiles       PermissionType @default(NEUTRAL)
  seemessageHistory PermissionType @default(ALLOW)

  // voice channel permission
  connect PermissionType @default(NEUTRAL)
  speak   PermissionType @default(NEUTRAL)
  video   PermissionType @default(NEUTRAL)
}

model ServerRole {
  id             String  @id @default(cuid()) @map("_id")
  name           String
  serverId       String
  server         Server  @relation(fields: [serverId], references: [id])
  order          Int
  // general permission
  viewChannel    Boolean @default(false)
  manageChannels Boolean @default(false)
  manageRoles    Boolean @default(false)

  //member permission
  createInvite   Boolean @default(true)
  // changeNickname Boolean @default(true)
  // manageNickname Boolean @default(false)
  kickMembers    Boolean @default(false)
  banMembers     Boolean @default(false)
  timeOutMembers Boolean @default(false)

  // text channel permission
  sendMessage       Boolean @default(true)
  attachFiles       Boolean @default(false)
  manageMessage     Boolean @default(false)
  seemessageHistory Boolean @default(true)

  // voice channel permission
  connect       Boolean @default(true)
  speak         Boolean @default(false)
  video         Boolean @default(false)
  muteMembers   Boolean @default(false)
  deafenMembers Boolean @default(false)

  // admin permission
  adminPermission Boolean @default(false)

  CategoryRole CategoryRole[]
  ChannelRole  ChannelRole[]

  UserRoleAssignment UserRoleAssignment[]
}

model Category {
  order         Int
  id            String         @id @default(cuid()) @map("_id")
  name          String
  serverId      String
  server        Server         @relation("serverCategory", fields: [serverId], references: [id])
  channels      Channel[]      @relation("categoryChannels")
  categoryRoles CategoryRole[]

  defaultCategoryRoleId String?
  defaultCategoryRole   DefaultCategoryRole?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum PermissionType {
  ALLOW
  NEUTRAL
  DENY
}

model CategoryRole {
  id           String     @id @default(cuid()) @map("_id")
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])
  serverRoleId String
  serverRole   ServerRole @relation(fields: [serverRoleId], references: [id])

  // general channel
  viewChannel    PermissionType @default(NEUTRAL)
  manageChannels PermissionType @default(NEUTRAL)
  manageRoles    PermissionType @default(NEUTRAL)

  //member permission
  createInvite PermissionType @default(NEUTRAL)

  // text channel permission
  sendMessage       PermissionType @default(NEUTRAL)
  attachFiles       PermissionType @default(NEUTRAL)
  manageMessage     PermissionType @default(NEUTRAL)
  seemessageHistory PermissionType @default(NEUTRAL)

  // voice channel permission
  connect       PermissionType @default(NEUTRAL)
  speak         PermissionType @default(NEUTRAL)
  video         PermissionType @default(NEUTRAL)
  muteMembers   PermissionType @default(NEUTRAL)
  deafenMembers PermissionType @default(NEUTRAL)
}

enum ChannelType {
  TEXT
  VOICE
}

model Channel {
  order        Int
  id           String        @id @default(cuid()) @map("_id")
  name         String
  description  String
  type         ChannelType

  categoryId   String
  category     Category      @relation("categoryChannels", fields: [categoryId], references: [id])
  channelRoles ChannelRole[] // Roles for this channel

  defaultChannelRoleId String?
  defaultChannelRole   DefaultChannelRole?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ChannelRole {
  id           String     @id @default(cuid()) @map("_id")
  channelId    String
  channel      Channel    @relation(fields: [channelId], references: [id])
  serverRoleId String
  serverRole   ServerRole @relation(fields: [serverRoleId], references: [id])

  //general permission
  viewChannel PermissionType @default(NEUTRAL)
  manageRoles PermissionType @default(NEUTRAL)

  // member permission
  createInvite PermissionType @default(NEUTRAL)

  // text channel permission
  sendMessage       PermissionType @default(NEUTRAL)
  attachFiles       PermissionType @default(NEUTRAL)
  manageMessage     PermissionType @default(NEUTRAL)
  seemessageHistory PermissionType @default(NEUTRAL)

  // voice channel permission
  connect       PermissionType @default(NEUTRAL)
  speak         PermissionType @default(NEUTRAL)
  video         PermissionType @default(NEUTRAL)
  muteMembers   PermissionType @default(NEUTRAL)
  deafenMembers PermissionType @default(NEUTRAL)
}

model UserRoleAssignment {
  id              String        @id @default(cuid()) @map("_id")
  serverProfileId String
  serverProfile   ServerProfile @relation(fields: [serverProfileId], references: [id])
  roleId          String
  role            ServerRole    @relation(fields: [roleId], references: [id])
}

model ChannelMessage {
  id              String @id @default(cuid()) @map("_id")
  channelId       String
  serverProfileId String
  serverProfile   ServerProfile @relation(fields: [serverProfileId], references: [id])

  content String
  imgUrl  String?
  fileUrl String?

  timestamp DateTime  @default(now())
  updated   DateTime?

  isUpdated Boolean @default(false)
  isDeleted Boolean @default(false)

  @@index([channelId])
}


model DirectMessage {
  id         String @id @default(cuid()) @map("_id")
  senderId   String
  receiverId String

  content String
  imgUrl  String
  fileUrl String

  timestamp DateTime  @default(now())
  updated   DateTime?

  isUpdated Boolean @default(false)
  isDeleted Boolean @default(false)

  @@index([senderId, receiverId])
}
