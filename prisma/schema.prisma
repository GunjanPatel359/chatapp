generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  email         String          @unique
  username      String          @unique
  avatarUrl     String?
  joinedServers ServerProfile[] @relation("UserServers")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Server        Server[]
  ServerProfile ServerProfile[]
}

model Server {
  id             String          @id @default(cuid()) @map("_id")
  name           String
  description    String?
  ownerId        String
  owner          User            @relation(fields: [ownerId], references: [id])
  serverRoles    ServerRole[] // Global roles for the server
  categories     Category[]
  channels       Channel[] // Non-category channels
  serverProfiles ServerProfile[] @relation("UserServers")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ServerProfile  ServerProfile[]
}

model ServerProfile {
  id                String               @id @default(cuid()) @map("_id")
  userId            String
  Userid            String
  serverId          String
  roles             UserRoleAssignment[] // Roles assigned to this user for the server
  userCategoryRoles UserCategoryRole[] // User-specific roles for categories
  userChannelRoles  UserChannelRole[] // User-specific roles for channels
  user              User                 @relation(fields: [userId], references: [id])
  server            Server               @relation(fields: [serverId], references: [id])
  User              User                 @relation("UserServers", fields: [Userid], references: [id])
  Server            Server               @relation("UserServers", fields: [Serverid], references: [id])
  Serverid          String

  @@unique([userId, serverId]) // Ensure one profile per user per server
}

model ServerRole {
  id                 String               @id @default(cuid()) @map("_id")
  name               String
  serverId           String
  server             Server               @relation(fields: [serverId], references: [id])
  permissions        PermissionSet        @relation(fields: [permissionsId], references: [id])
  permissionsId      String               @unique
  CategoryRole       CategoryRole[]
  ChannelRole        ChannelRole[]
  UserRoleAssignment UserRoleAssignment[]
}

model PermissionSet {
  id             String  @id @default(cuid()) @map("_id")
  viewChannel    Boolean @default(true)
  manageChannels Boolean @default(false)
  manageRoles    Boolean @default(false)
  manageServer   Boolean @default(false)
  createInvite   Boolean @default(true)
  changeNickname Boolean @default(true)
  manageNickname Boolean @default(false)
  kickMembers    Boolean @default(false)
  banMembers     Boolean @default(false)
  timeOutMembers Boolean @default(false)
  sendMessage    Boolean @default(true)
  attachFiles    Boolean @default(false)
  manageMessage  Boolean @default(false)
  messageHistory Boolean @default(true)
  connect        Boolean @default(true)
  speak          Boolean @default(false)
  video          Boolean @default(false)
  muteMembers    Boolean @default(false)
  deafenMembers  Boolean @default(false)

  ServerRole       ServerRole?
  CategoryRole     CategoryRole?
  ChannelRole      ChannelRole?
  UserCategoryRole UserCategoryRole?
  UserChannelRole  UserChannelRole?
}

model Category {
  id               String             @id @default(cuid()) @map("_id")
  name             String
  serverId         String
  server           Server             @relation(fields: [serverId], references: [id])
  channels         Channel[] // Channels inside this category
  categoryRoles    CategoryRole[] // Roles for this category
  UserCategoryRole UserCategoryRole[]
}

model CategoryRole {
  id            String        @id @default(cuid()) @map("_id")
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  serverRoleId  String
  serverRole    ServerRole    @relation(fields: [serverRoleId], references: [id])
  permissions   PermissionSet @relation(fields: [permissionsId], references: [id])
  permissionsId String        @unique
}

model Channel {
  id              String            @id @default(cuid()) @map("_id")
  name            String
  type            String // "TEXT", "VOICE"
  serverId        String
  server          Server            @relation(fields: [serverId], references: [id])
  categoryId      String?
  category        Category?         @relation(fields: [categoryId], references: [id])
  channelRoles    ChannelRole[] // Roles for this channel
  UserChannelRole UserChannelRole[]
}

model ChannelRole {
  id            String        @id @default(cuid()) @map("_id")
  channelId     String
  channel       Channel       @relation(fields: [channelId], references: [id])
  serverRoleId  String
  serverRole    ServerRole    @relation(fields: [serverRoleId], references: [id])
  permissions   PermissionSet @relation(fields: [permissionsId], references: [id])
  permissionsId String        @unique
}

model UserRoleAssignment {
  id              String        @id @default(cuid()) @map("_id")
  serverProfileId String
  serverProfile   ServerProfile @relation(fields: [serverProfileId], references: [id])
  roleId          String
  role            ServerRole    @relation(fields: [roleId], references: [id])
}

model UserCategoryRole {
  id              String        @id @default(cuid()) @map("_id")
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  serverProfileId String
  serverProfile   ServerProfile @relation(fields: [serverProfileId], references: [id])
  permissions     PermissionSet @relation(fields: [permissionsId], references: [id])
  permissionsId   String        @unique
}

model UserChannelRole {
  id              String        @id @default(cuid()) @map("_id")
  channelId       String
  channel         Channel       @relation(fields: [channelId], references: [id])
  serverProfileId String
  serverProfile   ServerProfile @relation(fields: [serverProfileId], references: [id])
  permissions     PermissionSet @relation(fields: [permissionsId], references: [id])
  permissionsId   String        @unique
}
